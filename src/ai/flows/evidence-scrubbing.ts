
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file contains the Genkit flow for automatically blurring sensitive information from uploaded screenshots.
 *
 * - evidenceScrubbing - A function that handles the evidence scrubbing process.
 * - EvidenceScrubbingInput - The input type for the evidenceScrubbing function.
 * - EvidenceScrubbingOutput - The return type for the evidenceScrubbing function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const EvidenceScrubbingInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A screenshot as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type EvidenceScrubbingInput = z.infer<typeof EvidenceScrubbingInputSchema>;

const EvidenceScrubbingOutputSchema = z.object({
  scrubbedPhotoDataUri: z
    .string()
    .describe("A scrubbed screenshot as a data URI with sensitive information blurred."),
});
export type EvidenceScrubbingOutput = z.infer<typeof EvidenceScrubbingOutputSchema>;

export async function evidenceScrubbing(input: EvidenceScrubbingInput): Promise<EvidenceScrubbingOutput> {
  return evidenceScrubbingFlow(input);
}

const evidenceScrubbingPrompt = ai.definePrompt({
  name: 'evidenceScrubbingPrompt',
  input: {schema: EvidenceScrubbingInputSchema},
  output: {schema: EvidenceScrubbingOutputSchema},
  prompt: `You are an AI tool that automatically blurs sensitive information from screenshots.

  Given a screenshot, identify and blur any personally identifiable information (PII) such as names, addresses, and license plates, while preserving the visibility of potential criminal evidence.

  The scrubbed image should then be returned as a data URI.

  Input Image: {{media url=photoDataUri}}
  Output: Scrubbed Image.`, // actual content of prompt
  config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
    ],
  },
});

const evidenceScrubbingFlow = ai.defineFlow(
  {
    name: 'evidenceScrubbingFlow',
    inputSchema: EvidenceScrubbingInputSchema,
    outputSchema: EvidenceScrubbingOutputSchema,
  },
  async input => {
    const {media} = await ai.generate({
      model: 'googleai/gemini-2.0-flash-exp',
      prompt: [{
        media: {url: input.photoDataUri}
      }, {text: 'Blur out any private identifiable information' }],
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });

    if (!media?.url) {
      throw new Error('Evidence scrubbing failed: AI did not return a valid scrubbed image.');
    }

    return {
      scrubbedPhotoDataUri: media.url,
    };
  }
);
